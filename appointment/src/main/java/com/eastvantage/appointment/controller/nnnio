let data = {}, currentSheet = '', filters = {};

const sheetButtons = document.getElementById('sheetButtons'),
      sheetTitle = document.getElementById('sheetTitle'),
      dataTable = document.getElementById('dataTable'),
      headerRow = document.getElementById('headerRow'),
      tableBody = document.getElementById('tableBody'),
      emptyState = document.getElementById('emptyState'),
      toolbar = document.getElementById('toolbar'),
      btnRemove = document.getElementById('btnRemove'),
      btnSave = document.getElementById('btnSave');

window.onload = () => {
  const files = ['Recognition Settings', 'Screening Settings'];
  files.forEach(file => {
    const btn = document.createElement('button');
    btn.innerText = file;
    btn.onclick = () => loadFile(file.toLowerCase().includes('recognition') ? 'recognition' : 'screening', btn);
    sheetButtons.appendChild(btn);
  });
};

async function loadFile(type, clickedBtn) {
  currentSheet = '';
  data = {};
  filters = {};
  sheetTitle.innerText = '';
  tableBody.innerHTML = '';
  headerRow.innerHTML = '';
  toolbar.classList.remove('visible');
  emptyState.style.display = 'block';
  dataTable.style.display = 'none';

  const res = await fetch(`/${type}`);
  const result = await res.json();
  data = result;

  // Clear old buttons
  Array.from(sheetButtons.children).forEach(child => {
    if (child.dataset && child.dataset.sheet) child.remove();
  });

  // Highlight selected file
  Array.from(sheetButtons.children).forEach(b => b.classList.remove('active'));
  clickedBtn.classList.add('active');

  // Add buttons for each sheet
  Object.keys(data).forEach(sheet => {
    const btn = document.createElement('button');
    btn.innerText = 'ðŸ“„ ' + sheet;
    btn.dataset.sheet = 'true';
    btn.onclick = () => selectSheet(sheet, btn);
    sheetButtons.appendChild(btn);
  });
}
