function loadSheet(type, sheetName) {
  const loader = document.getElementById('loader');
  loader.style.display = 'flex';

  // Auto-close sidebar
  document.getElementById('sidebar').style.display = 'none';
  document.getElementById('toggleSidebar').innerHTML = '&#x25B6;'; // â–¶

  try {
    const sheetData = excelData[type][sheetName];
    const contentDiv = document.getElementById('content');
    contentDiv.innerHTML = ''; // clear previous content

    const capitalizeFirst = (str) =>
      str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g, ' ');

    if (!sheetData || !sheetData.length) {
      loader.style.display = 'none';
      contentDiv.innerHTML += '<p>No data available in this sheet.</p>';
      return;
    }

    // === SHEET TITLE BAR ===
    const sheetTitleBar = document.createElement('div');
    sheetTitleBar.style.display = 'flex';
    sheetTitleBar.style.justifyContent = 'space-between';
    sheetTitleBar.style.alignItems = 'center';
    sheetTitleBar.style.position = 'sticky';
    sheetTitleBar.style.top = '0';
    sheetTitleBar.style.backgroundColor = 'white';
    sheetTitleBar.style.zIndex = '3';
    sheetTitleBar.style.padding = '10px 0';
    sheetTitleBar.style.borderBottom = '1px solid #ccc';

    const fileLabel =
      type === 'recognition'
        ? 'Recognition Settings'
        : type === 'screening'
        ? 'Screening Settings'
        : type;

    const sheetTitle = document.createElement('h2');
    sheetTitle.textContent = `${fileLabel} / ${capitalizeFirst(sheetName)}`;
    sheetTitle.style.margin = '0';
    sheetTitle.style.fontSize = '16px';

    // === VIEW MODE TOGGLE ===
    const viewToggle = document.createElement('div');
    viewToggle.id = 'viewOptions';
    viewToggle.style.textAlign = 'right';

    viewToggle.innerHTML = `
      <label>
        <input type="radio" name="viewMode" value="comfortable" checked> Comfortable
      </label>
      <label style="margin-left: 10px;">
        <input type="radio" name="viewMode" value="compact"> Compact
      </label>
    `;

    viewToggle.querySelectorAll('input[name="viewMode"]').forEach((radio) => {
      radio.addEventListener('change', (e) => {
        if (e.target.value === 'compact') {
          contentDiv.classList.add('compact-mode');
        } else {
          contentDiv.classList.remove('compact-mode');
        }
      });
    });

    sheetTitleBar.appendChild(sheetTitle);
    sheetTitleBar.appendChild(viewToggle);
    contentDiv.appendChild(sheetTitleBar);

    // === TABLE RENDERING ===
    const tableContainer = document.createElement('div');
    tableContainer.id = 'table-container';

    const table = document.createElement('table');
    table.classList.add('sheet-table');

    const header = document.createElement('tr');
    const colKeys = Object.keys(sheetData[0]);

    colKeys.forEach((col) => {
      const th = document.createElement('th');
      th.textContent = col;
      header.appendChild(th);
    });

    table.appendChild(header);

    sheetData.forEach((row) => {
      const tr = document.createElement('tr');
      Object.values(row).forEach((cell) => {
        const td = document.createElement('td');
        td.textContent = cell;

        td.style.maxWidth = '300px';
        td.style.overflowWrap = 'break-word';
        td.style.wordBreak = 'break-word';
        td.style.whiteSpace = 'normal';

        tr.appendChild(td);
      });
      table.appendChild(tr);
    });

    tableContainer.appendChild(table);
    contentDiv.appendChild(tableContainer);
  } catch (err) {
    console.error('Error rendering sheet:', err);
    alert('Failed to render sheet.');
  } finally {
    loader.style.display = 'none';
  }
}
