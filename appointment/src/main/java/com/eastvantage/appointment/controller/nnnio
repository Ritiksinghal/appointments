function loadSheet(type, sheetName) {
  const loader = document.getElementById('loader');
  loader.style.display = 'flex';

  document.getElementById('sidebar').style.display = 'none';
  document.getElementById('toggleSidebar').innerHTML = '&#x25B6;';

  try {
    const sheetData = excelData[type][sheetName];
    const contentDiv = document.getElementById('content');
    contentDiv.innerHTML = '';

    const capitalize = (str) =>
      str.charAt(0).toUpperCase() + str.slice(1).toLowerCase().replace(/_/g, ' ');

    if (!sheetData || !sheetData.length) {
      loader.style.display = 'none';
      contentDiv.innerHTML += '<p>No data available in this sheet.</p>';
      return;
    }

    // === Title Bar ===
    const sheetTitleBar = document.createElement('div');
    sheetTitleBar.style.display = 'flex';
    sheetTitleBar.style.justifyContent = 'space-between';
    sheetTitleBar.style.alignItems = 'center';
    sheetTitleBar.style.position = 'sticky';
    sheetTitleBar.style.top = '0';
    sheetTitleBar.style.backgroundColor = 'white';
    sheetTitleBar.style.zIndex = '3';
    sheetTitleBar.style.padding = '10px 0';
    sheetTitleBar.style.borderBottom = '1px solid #ccc';

    const fileLabel =
      type === 'recognition'
        ? 'Recognition Settings'
        : type === 'screening'
        ? 'Screening Settings'
        : type;

    const sheetTitle = document.createElement('h2');
    sheetTitle.textContent = `${fileLabel} / ${capitalize(sheetName)}`;
    sheetTitle.style.margin = '0';
    sheetTitle.style.fontSize = '16px';

    const viewToggle = document.createElement('div');
    viewToggle.id = 'viewOptions';
    viewToggle.style.textAlign = 'right';

    viewToggle.innerHTML = `
      <label>
        <input type="radio" name="viewMode" value="comfortable" checked> Comfortable
      </label>
      <label style="margin-left: 10px;">
        <input type="radio" name="viewMode" value="compact"> Compact
      </label>
    `;

    viewToggle.querySelectorAll('input[name="viewMode"]').forEach((radio) => {
      radio.addEventListener('change', (e) => {
        if (e.target.value === 'compact') {
          contentDiv.classList.add('compact-mode');
        } else {
          contentDiv.classList.remove('compact-mode');
        }
      });
    });

    const rightBar = document.createElement('div');
    rightBar.appendChild(viewToggle);

    sheetTitleBar.appendChild(sheetTitle);
    sheetTitleBar.appendChild(rightBar);
    contentDiv.appendChild(sheetTitleBar);

    // === Table ===
    const tableContainer = document.createElement('div');
    tableContainer.id = 'table-container';

    const table = document.createElement('table');
    table.classList.add('sheet-table');

    const header = document.createElement('tr');
    const filterRow = document.createElement('tr');

    const colKeys = Object.keys(sheetData[0]);
    const hiddenCols = new Set();
    let currentSort = { colIndex: -1, asc: true };

    // === Sort Function
    function sortData(colIndex, asc) {
      const key = colKeys[colIndex];
      sheetData.sort((a, b) => {
        const valA = a[key] ?? '';
        const valB = b[key] ?? '';
        return asc
          ? valA.toString().localeCompare(valB.toString())
          : valB.toString().localeCompare(valA.toString());
      });
      renderBody();
    }

    // === Filter Function
    const filters = new Array(colKeys.length).fill('');

    function renderBody() {
      // Clear previous body rows
      table.querySelectorAll('tr.data-row').forEach((tr) => tr.remove());

      const filteredData = sheetData.filter((row) =>
        colKeys.every((key, i) =>
          filters[i] ? (row[key] ?? '').toString().toLowerCase().includes(filters[i].toLowerCase()) : true
        )
      );

      filteredData.forEach((row) => {
        const tr = document.createElement('tr');
        tr.className = 'data-row';
        colKeys.forEach((key) => {
          const td = document.createElement('td');
          td.textContent = row[key];
          td.style.maxWidth = '300px';
          td.style.overflowWrap = 'break-word';
          td.style.whiteSpace = 'normal';
          tr.appendChild(td);
        });
        table.appendChild(tr);
      });
    }

    colKeys.forEach((col, idx) => {
      const th = document.createElement('th');
      th.style.position = 'relative';
      th.style.userSelect = 'none';
      th.style.whiteSpace = 'nowrap';
      th.style.paddingRight = '28px';
      th.style.cursor = 'pointer';

      const labelSpan = document.createElement('span');
      labelSpan.textContent = col;

      const sortIcon = document.createElement('span');
      sortIcon.innerHTML = '';
      sortIcon.style.marginLeft = '5px';
      sortIcon.style.fontSize = '12px';
      sortIcon.style.opacity = '0.6';

      th.onclick = () => {
        if (currentSort.colIndex === idx) {
          currentSort.asc = !currentSort.asc;
        } else {
          currentSort = { colIndex: idx, asc: true };
        }
        sortIcon.innerHTML = currentSort.asc ? 'ðŸ”¼' : 'ðŸ”½';
        table.querySelectorAll('th span.sort-icon').forEach((s) => (s.innerHTML = ''));
        sortIcon.className = 'sort-icon';
        sortData(idx, currentSort.asc);
      };

      th.appendChild(labelSpan);
      th.appendChild(sortIcon);

      // === Resizer
      const resizer = document.createElement('div');
      resizer.className = 'col-resizer';
      th.appendChild(resizer);

      resizer.addEventListener('mousedown', (e) => {
        e.preventDefault();
        const startX = e.pageX;
        const startWidth = th.offsetWidth;
        const idx1 = idx + 1;

        const onMouseMove = (moveEvent) => {
          const newWidth = startWidth + (moveEvent.pageX - startX);
          th.style.width = newWidth + 'px';
          document.querySelectorAll(`.sheet-table td:nth-child(${idx1})`)
            .forEach((td) => (td.style.width = newWidth + 'px'));
        };

        const onMouseUp = () => {
          document.removeEventListener('mousemove', onMouseMove);
          document.removeEventListener('mouseup', onMouseUp);
        };

        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
      });

      header.appendChild(th);

      // === Filter Input
      const filterTd = document.createElement('td');
      const input = document.createElement('input');
      input.type = 'text';
      input.placeholder = 'Search...';
      input.style.width = '95%';
      input.style.fontSize = '12px';
      input.style.padding = '3px';

      input.addEventListener('input', (e) => {
        filters[idx] = e.target.value;
        renderBody();
      });

      filterTd.appendChild(input);
      filterRow.appendChild(filterTd);
    });

    table.appendChild(header);
    table.appendChild(filterRow);
    renderBody();

    tableContainer.appendChild(table);
    contentDiv.appendChild(tableContainer);
  } catch (err) {
    console.error('Error rendering sheet:', err);
    alert('Failed to render sheet.');
  } finally {
    loader.style.display = 'none';
  }
}
