let data = {}, currentSheet = '', filters = {};
const sheetButtons = document.getElementById('sheetButtons'),
      sheetTitle = document.getElementById('sheetTitle'),
      dataTable = document.getElementById('dataTable'),
      headerRow = document.getElementById('headerRow'),
      tableBody = document.getElementById('tableBody'),
      emptyState = document.getElementById('emptyState'),
      toolbar = document.getElementById('toolbar'),
      btnRemove = document.getElementById('btnRemove'),
      btnSave = document.getElementById('btnSave');

window.onload = async () => {
  data = await (await fetch('/api/config/all')).json();
  Object.keys(data).forEach(sheet => {
    const btn = document.createElement('button');
    btn.innerText = sheet;
    btn.onclick = () => selectSheet(sheet, btn);
    sheetButtons.appendChild(btn);
  });
};

function selectSheet(sheet, clickedBtn) {
  currentSheet = sheet;
  filters = {};
  sheetTitle.innerText = sheet;
  dataTable.style.display = 'table';
  emptyState.style.display = 'none';
  toolbar.classList.add('visible');
  btnRemove.classList.remove('enabled');
  btnSave.classList.remove('enabled');
  Array.from(sheetButtons.children).forEach(b => b.classList.remove('active'));
  clickedBtn.classList.add('active');
  renderTable();
}

function renderTable() {
  headerRow.innerHTML = '';
  tableBody.innerHTML = '';
  const rows = data[currentSheet] || [];
  if (!rows.length) return;
  const headers = Object.keys(rows[0]);
  headerRow.appendChild(document.createElement('th')); // checkbox col
  headers.forEach(header => {
    const th = document.createElement('th');
    th.innerText = header;
    const icon = document.createElement('span');
    icon.className = 'filter-icon';
    icon.innerText = 'â‰¡';
    icon.onclick = e => showFilterBox(e, header, th);
    th.appendChild(icon);
    headerRow.appendChild(th);
  });

  const filtered = rows.map((r, idx) => ({ idx, r }))
    .filter(({ r }) => Object.entries(filters).every(([k, v]) => {
      const text = (r[k] ?? '').toString();
      return filters[k + '_regex']
        ? new RegExp(v, filters[k + '_case'] ? '' : 'i').test(text)
        : text.toLowerCase().includes(v);
    }));

  filtered.forEach(({ idx, r }) => {
    const tr = document.createElement('tr');
    const cbTd = document.createElement('td');
    cbTd.className = 'checkbox-col';
    const cb = document.createElement('input');
    cb.type = 'checkbox';
    cb.dataset.index = idx;
    cb.onclick = () => toggleActions();
    cbTd.appendChild(cb);
    tr.appendChild(cbTd);

    headers.forEach(h => {
      const td = document.createElement('td'),
            inp = document.createElement('input');
      inp.value = r[h] ?? '';
      inp.oninput = e => data[currentSheet][idx][h] = e.target.value;
      td.appendChild(inp);
      tr.appendChild(td);
    });
    tableBody.appendChild(tr);
  });
}

function showFilterBox(e, header, th) {
  document.querySelectorAll('.filter-box').forEach(x => x.remove());
  const box = document.createElement('div'); box.className = 'filter-box';
  const ip = document.createElement('input');
  ip.value = filters[header] || '';
  ip.placeholder = 'Filter...';
  const lb = document.createElement('label');
  const ckCase = document.createElement('input');
  ckCase.type = 'checkbox';
  const lbCase = document.createElement('label');
  lbCase.innerText = 'Case';
  lbCase.style.fontSize = '12px';
  const ckRegex = document.createElement('input');
  ckRegex.type = 'checkbox';
  const lbRegex = document.createElement('label');
  lbRegex.innerText = 'Regex';
  lbRegex.style.fontSize = '12px';
  const clr = document.createElement('span');
  clr.className = 'clear-filters';
  clr.innerText = 'Clear';
  clr.onclick = () => { filters[header] = ''; filters[header + '_regex'] = false; filters[header + '_case'] = false; renderTable(); box.remove(); };

  ip.oninput = () => { filters[header] = ip.value; renderTable(); };
  ckCase.onchange = () => { filters[header + '_case'] = ckCase.checked; renderTable(); };
  ckRegex.onchange = () => { filters[header + '_regex'] = ckRegex.checked; renderTable(); };

  box.append(ip, ckCase, lbCase, ckRegex, lbRegex, clr);
  th.append(box);
  ip.focus();
  e.stopPropagation();
  document.addEventListener('click', () => box.remove(), { once: true });
}

function addRow() {
  const headers = Object.keys(data[currentSheet][0] || {});
  const blank = headers.reduce((a, h) => (a[h] = '' , a), {});
  data[currentSheet].push(blank);
  renderTable();
}

function removeSelected() {
  const chk = tableBody.querySelectorAll('input[type=checkbox]:checked');
  const idxs = [...chk].map(c => +c.dataset.index);
  data[currentSheet] = data[currentSheet].filter((_, i) => !idxs.includes(i));
  renderTable();
  toggleActions();
}

function toggleActions() {
  const any = tableBody.querySelector('input[type=checkbox]:checked');
  btnRemove.classList.toggle('enabled', !!any);
  btnSave.classList.toggle('enabled', !!any);
}

function save() {
  if (!btnSave.classList.contains('enabled')) return;
  fetch('/api/config/update-all', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data)
  }).then(r => r.ok ? alert('Saved!') : alert('Save failed.'));
}